/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SainsburysTechTest;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.apache.commons.io.IOUtils;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.MalformedURLException;

import org.junit.Before;
import org.junit.Test;

import GroceryStore.GroceryItem;
import GroceryStore.GroceryList;

public class SainsburysTechTestUnitTests {

	private GroceryService service;

	@Before
	public void setUp() throws MalformedURLException {
		service = new GroceryService(
				"https://jsainsburyplc.github.io/serverside-test/site/www.sainsburys.co.uk/webapp/wcs/stores/servlet/gb/groceries/berries-cherries-currants6039.html");
	}

	@Test
	public void testGetGroceryProductsAsHTML() throws IOException {

		GroceryList response = service.scrapeGrociesListfromHTML();
		
		String json = service.convertGroceryListToJSON(response);
		System.out.println(json);
		
		assertNotEquals(json, null);
	}
	
	@Test 
	public void testGetProductsSummary() throws IOException
	{	
		Document doc = Jsoup.parse(IOUtils.toString(
			      this.getClass().getResourceAsStream("/ExampleProductSummary.html")
			    ));
		
		GroceryItem  testItem = service.getProductSummary(doc);
	
		assertNotNull(testItem.getTitle());
		assertNotEquals(testItem.getUnit_price(), (BigDecimal.ZERO));
	}
	
	@Test 
	public void testGetProductsAdditionalInformation() throws IOException
	{
		
		GroceryItem testItem = new GroceryItem.GroceryItemBuilder().build();
		
		Document doc = Jsoup.parse(IOUtils.toString(
			      this.getClass().getResourceAsStream("/ExampleProductAdditionalInformation.html")
			    ));
		
		
		service.getProductInformation(testItem, doc);
	
		assertNotNull(testItem.getDescription());
		assertNotEquals(testItem.getKcal_per_100g(), new Integer(0));
		
	}

	@Test 
    public void testExampleJSONParsesasPOJO() {
		
		// TODO : Refactor to use a Grocery Item builder patter
		
		GroceryList groceryList = new GroceryList();
		
		GroceryItem item1 = new GroceryItem.GroceryItemBuilder()
			.setTitle("Sainsbury's Strawberries 400g")
			.setKcal_per_100g(33)
			.setUnitPrice(1.75)
			.setDescription("by Sainsbury's strawberries")
			.build();
		
		GroceryItem item2 = new GroceryItem.GroceryItemBuilder()
			.setTitle("Sainsbury's Blueberries 200g")
			.setUnitPrice(1.75)
			.setKcal_per_100g(45)
			.setDescription("by Sainsbury's blueberries")
			.build();
			
		GroceryItem item3 = new GroceryItem.GroceryItemBuilder()
			.setTitle("Sainsbury's Cherry Punnet 200g")
			.setKcal_per_100g(52)
			.setUnitPrice(1.5)
			.setDescription("Cherries")
			.build();
		
		
		groceryList.addItem(item1);
		groceryList.addItem(item2);
		groceryList.addItem(item3);
		
		
    	String compareString = "{\"results\":[{\"title\":\"Sainsbury's Strawberries 400g\",\"kcal_per_100g\":33,\"unit_price\":1.75,\"description\":\"by Sainsbury's strawberries\"},{\"title\":\"Sainsbury's Blueberries 200g\",\"kcal_per_100g\":45,\"unit_price\":1.75,\"description\":\"by Sainsbury's blueberries\"},{\"title\":\"Sainsbury's Cherry Punnet 200g\",\"kcal_per_100g\":52,\"unit_price\":1.50,\"description\":\"Cherries\"}],\"total\":{\"gross\":5.00,\"vat\":0.83}}";
    			
    	
    	String result = service.convertGroceryListToJSON(groceryList);
    	System.out.println(result);
    	System.out.println(compareString);
    	
    	
    	assertTrue(result.equals(compareString));
	}
    			
}
